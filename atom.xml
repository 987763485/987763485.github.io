<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晚新的博客</title>
  
  <subtitle>关注技术：javasctipt、php、python、golang、docker、linux、flutter</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://987763485.github.io/"/>
  <updated>2019-02-20T11:32:30.676Z</updated>
  <id>https://987763485.github.io/</id>
  
  <author>
    <name>晚新</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript的浅拷贝和深拷贝</title>
    <link href="https://987763485.github.io/2018/02/28/Javascript%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://987763485.github.io/2018/02/28/Javascript的浅拷贝和深拷贝/</id>
    <published>2018-02-28T02:17:18.000Z</published>
    <updated>2019-02-20T11:32:30.676Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的理解js的深浅拷贝，我们先来理解一些js基本的概念 —— Javascript有五种基本数据类型（也就是简单数据类型），它们分别是：Undefined，Null，Boolean，Number和String。还含有一种复杂的数据类型（也叫引用类型），就是对象</p><p> 注意Undefined和Null的区别，Undefined类型只有一个值，就是undefined，Null类型也只有一个值，也就是null</p><p>Undefined 其实就是已声明未赋值的变量输出的结果</p><p>null 其实就是一个不存在的对象的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">console.log(a)//undefined</span><br><span class="line"></span><br><span class="line">console.log(document.getElementById(&apos;asdd&apos;))//没有id为asdd的节点,输出null</span><br></pre></td></tr></table></figure><p>基本数据类型与引用数据类型</p><h3 id="1-对于基本数据类型"><a href="#1-对于基本数据类型" class="headerlink" title="1. 对于基本数据类型"></a>1. 对于基本数据类型</h3><p>他们的值在内存中占据着固定大小的空间，并被保存在栈内存中。当一个变量向另一个变量复制基本类型的值，会创建这个值的副本，并且我们不能给基本数据类型的值添加属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var x = 1;</span><br><span class="line">var y = x;</span><br><span class="line">x.name = &apos;hanna&apos;;</span><br><span class="line">console.log(y); //1</span><br><span class="line">console.log(x.name); //undefined</span><br></pre></td></tr></table></figure><p>上面的代码中，x是基本数据类型(Number)， y是x的一个副本，它们两者都占有不同位置但相等的内存空间，只是它们的值相等，若改变其中一方，另一方不会随之改变。</p><h3 id="2-对于引用类型"><a href="#2-对于引用类型" class="headerlink" title="2. 对于引用类型"></a>2. 对于引用类型</h3><p>复杂的数据类型即是引用类型，它的值是对象，保存在堆内存中，包含引用类型值的变量实际上包含的不是对象本身，而是一个指向该对象的指针。从一个变量向另一个变量复制引用类型的值，复制的其实是指针地址而已，因此两个变量最终都指向同一个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">   name:&apos;Hanna Ding&apos;,</span><br><span class="line">   age: 22</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = obj;</span><br><span class="line">obj2[&apos;c&apos;] = 5;</span><br><span class="line">console.log(obj); //Object &#123;name: &quot;Hanna Ding&quot;, age: 22, c: 5&#125;</span><br><span class="line">console.log(obj2); //Object &#123;name: &quot;Hanna Ding&quot;, age: 0, c: 5&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到obj赋值给obj2后，但我们改变其中一个对象的属性值，两个对象都发生了改变，根本原因就是obj和obj2两个变量都指向同一个指针，赋值时只是复制了指针地址，它们指向同一个引用，所以当我们改变其中一个的值就会影响到另一个变量的值。</p><h4 id="01-浅拷贝"><a href="#01-浅拷贝" class="headerlink" title="01 浅拷贝"></a>01 浅拷贝</h4><p> 其实上面那段代码就是浅拷贝，有时候我们只是想备份数组，但是只是简单让它赋给一个变量，改变其中一个，另外一个就紧跟着改变，但很多时候这不是我们想要的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, &apos;4&apos;];</span><br><span class="line"></span><br><span class="line">var arr2 = arr;</span><br><span class="line">arr2[1] = &quot;test&quot;; </span><br><span class="line">console.log(arr); // [1, &quot;test&quot;, 3, &quot;4&quot;]</span><br><span class="line">console.log(arr2); // [1, &quot;test&quot;, 3, &quot;4&quot;]</span><br></pre></td></tr></table></figure></p><h4 id="02-深拷贝"><a href="#02-深拷贝" class="headerlink" title="02 深拷贝"></a>02 深拷贝</h4><h5 id="（1）数组"><a href="#（1）数组" class="headerlink" title="（1）数组"></a>（1）数组</h5><p>对于数组我们可以使用slice() 和 concat() 方法来解决上面的问题</p><p>slice </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line">var arrCopy = arr.slice(0);</span><br><span class="line">arrCopy[0] = &apos;test&apos;</span><br><span class="line">console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">console.log(arrCopy); // [&quot;test&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></figure><p>concat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</span><br><span class="line">var arrCopy = arr.concat(); //或者 [].concat(arr)</span><br><span class="line">arrCopy[0] = &apos;test&apos;</span><br><span class="line">console.log(arr); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line">console.log(arrCopy); // [&quot;test&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></pre></td></tr></table></figure><p>知识点补充：</p><p>arrayObj.slice(start, [end]) 该方法返回一个 Array 对象，其中包含了 arrayObj 的指定部分。不会改变原数组<br>arrayObj.concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<br>其实也就是下面这么个意思。。。但还是用上面的方法来实现比较简单高效些</p><p>function deepCopy(arr1, arr2) {<br>   for (var i = 0; i &lt; arr1.length; ++i) {<br>       arr2[i] = arr1[i];<br>   }<br>}</p><h5 id="（2）对象"><a href="#（2）对象" class="headerlink" title="（2）对象"></a>（2）对象</h5><p>对象的深拷贝实现原理： 定义一个新的对象，遍历源对象的属性 并 赋给新对象的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">   name:&apos;Hanna Ding&apos;,</span><br><span class="line">   age: 22</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj2 = new Object();</span><br><span class="line">obj2.name = obj.name;</span><br><span class="line">obj2.age = obj.age</span><br><span class="line"></span><br><span class="line">obj.name = &apos;xiaoDing&apos;;</span><br><span class="line">console.log(obj); //Object &#123;name: &quot;xiaoDing&quot;, age: 22&#125;</span><br><span class="line">console.log(obj2); //Object &#123;name: &quot;Hanna Ding&quot;, age: 22&#125;</span><br></pre></td></tr></table></figure><p>理解了以上的基本思想，我们就可以封装一个方法 deepCopy来实现对象的深拷贝，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    name: &apos;Hanna&apos;,</span><br><span class="line">    age: 22</span><br><span class="line">&#125;</span><br><span class="line">var deepCopy = function (source) &#123;</span><br><span class="line">    var result = &#123;&#125;;            </span><br><span class="line">    for(var key in source) &#123;                </span><br><span class="line">        if(typeof source[key] === &apos;object&apos;) &#123;</span><br><span class="line">            result[key] = deepCopy(source[key])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;            </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var objCopy = deepCopy(obj)</span><br><span class="line">obj.name = &apos;ding&apos;;</span><br><span class="line">console.log(obj);//Object &#123;name: &quot;ding&quot;, age: 22&#125;</span><br><span class="line">console.log(objCopy);//Object &#123;name: &quot;Hanna&quot;, age: 22&#125;</span><br></pre></td></tr></table></figure><h6 id="ES6中新增加了Object-assgin也可以实现对象的深拷贝"><a href="#ES6中新增加了Object-assgin也可以实现对象的深拷贝" class="headerlink" title="ES6中新增加了Object.assgin也可以实现对象的深拷贝"></a>ES6中新增加了Object.assgin也可以实现对象的深拷贝</h6><p> Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const object1 = &#123;</span><br><span class="line">  a: 1,</span><br><span class="line">  b: 2,</span><br><span class="line">  c: 3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const object2 = Object.assign(&#123;c: 4, d: 5&#125;, object1);</span><br><span class="line"></span><br><span class="line">console.log(object2.c, object2.d);</span><br><span class="line">// expected output: 3 5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了更好的理解js的深浅拷贝，我们先来理解一些js基本的概念 —— Javascript有五种基本数据类型（也就是简单数据类型），它们分别是：Undefined，Null，Boolean，Number和String。还含有一种复杂的数据类型（也叫引用类型），就是对象&lt;/p&gt;
      
    
    </summary>
    
      <category term="计算机编程" scheme="https://987763485.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="https://987763485.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常见的创建对象的几种方式</title>
    <link href="https://987763485.github.io/2018/02/25/JavaScript%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://987763485.github.io/2018/02/25/JavaScript常见的创建对象的几种方式/</id>
    <published>2018-02-25T11:12:32.000Z</published>
    <updated>2019-02-20T02:17:23.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="通过Object构造函数或对象字面量创建单个对象"><a href="#通过Object构造函数或对象字面量创建单个对象" class="headerlink" title="通过Object构造函数或对象字面量创建单个对象"></a>通过Object构造函数或对象字面量创建单个对象</h3><p>　　这些方式有明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为了解决这个问题，出现了工厂模式。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>　　考虑在ES中无法创建类（ES6前），开发人员发明了一种函数，用函数来封装以特定接口创建对象的细节。（实现起来是在一个函数内创建好对象，然后把对象返回）。</p><p>function createPerson(name,age,job){<br>    var o=new Object();<br>    o.name=name;<br>    o.age=age;<br>    o.job=job;<br>    o.sayName=function(){<br>        alert(this.name);<br>    };<br>    return 0;<br>}</p><p>var person1=createPerson(“Nicholas”,29,”Software Engineer”);<br>var person2=createPerson(“Greg”,27,”Doctor”);</p><p>　　函数createPerson（）能够根据接受的参数来构建一个包含所有必要信息的Person对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题，即怎么知道一个对象的类型。随着JS发展，又一个模式出现了。</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>　　像Object和Array这样的原生构造函数，在运行时会自动出现在执行环境。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p><p>function Person(name,age,job){<br>    this.name=name;<br>    this.age=age;<br>    this.job=job;<br>    this.sayName=function(){<br>        alert(this.name);<br>    };<br>}</p><p>var person1=new Person(…);<br>var person2=new Person(…);</p><p>　　与工厂模式相比，具有以下特点：<br>没有显式创建对象；<br>直接将属性和方法赋给了this对象；<br>没有return语句；<br>要创建新实例，必须使用new操作符；（否则属性和方法将会被添加到window对象）<br>可以使用instanceof操作符检测对象类型<br>　　构造函数的问题：<br>　　构造函数内部的方法会被重复创建，不同实例内的同名函数是不相等的。可通过将方法移到构造函数外部解决这一问题，但面临新问题：封装性不好。<br>　　这些问题可通过原型模式解决。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>　　我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。（prototype就是通过调用构造函数而创建的那个对象实例的原型对象）。<br>　　使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</p><p>function Person(){<br>}</p><p>Person.prototype.name=”Nicholas”;<br>Person.prototype.age=29;<br>Person.prototype.job=”…”;<br>Person.prototype.sayName=function(){<br>    …<br>};</p><p>var person1=new Person();<br>person1.sayName();//“Nicholas”</p><p>　　更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象，并重设constructor属性。</p><p>function Person(){<br>}</p><p>Person.prototype={<br>    name:”…”,<br>    age:29,<br>    job:”…”,<br>    sayName:function(){<br>        …<br>    }<br>};</p><p>Object.defineProperty(Person.prototype,”constructor”,{<br>    enumerable:false,<br>    value:Person,<br>});</p><p>　　原型对象的问题：<br>他省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值，虽然这会在一定程度带来一定的不便，但不是最大的问题，最大的问题是由其共享的本性所决定的。<br>对于包含基本值的属性可以通过在实例上添加一个同名属性隐藏原型中的属性。然后，对于包含引用数据类型的值来说，会导致问题。<br>　　这些问题导致很少单独使用原型模式。</p><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>　　这是创建自定义类型的最常见的方式。<br>　　构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。所以每个实例都会有自己的一份实例属性的副本，但同时共享着对方法的引用，最大限度的节省了内存。同时支持向构造函数传递参数。</p><p>function Person(name,age,job){<br>    this.name=name;<br>    this.age=age;<br>    this.job=job;<br>    this.friends=[“S”,”C”];<br>}</p><p>Person.prototype={<br>    constructor:Person,<br>    sayName:function(){<br>        alert(this.name);<br>    }<br>};</p><p>var person1=new Person(…);</p><h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><p>function Person(name,age,job){<br>    this.name=name;<br>    this.age=age;<br>    this.job=job;</p><pre><code>if(typeof this.sayName!=&quot;function&quot;){    Person.prototype.sayName=function(){        alert(this.name);    };}</code></pre><p>}</p><p>　　这里只有sayName（）不存在的情况下，才会将它添加到原型中，这段代码只会在初次调用构造函数时才执行。这里对原型所做的修改，能够立刻在所有实例中得到反映。</p><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><p>　　ES5定义了一个名为Object.create（）的方法，它创建一个新对象，其中第一个参数是这个对象的原型，第二个参数对对象的属性进行进一步描述。</p><h3 id="另有寄生构造函数模式和稳妥构造函数模式"><a href="#另有寄生构造函数模式和稳妥构造函数模式" class="headerlink" title="另有寄生构造函数模式和稳妥构造函数模式"></a>另有寄生构造函数模式和稳妥构造函数模式</h3><p>原文链接：<a href="https://www.cnblogs.com/zczhangcui/p/6389023.html" target="_blank" rel="noopener">https://www.cnblogs.com/zczhangcui/p/6389023.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;通过Object构造函数或对象字面量创建单个对象&quot;&gt;&lt;a href=&quot;#通过Object构造函数或对象字面量创建单个对象&quot; class=&quot;headerlink&quot; title=&quot;通过Object构造函数或对象字面量创建单个对象&quot;&gt;&lt;/a&gt;通过Object构造函数或对
      
    
    </summary>
    
      <category term="计算机编程" scheme="https://987763485.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="javascript" scheme="https://987763485.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>国内知名前端团队</title>
    <link href="https://987763485.github.io/2018/02/22/%E5%9B%BD%E5%86%85%E7%9F%A5%E5%90%8D%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/"/>
    <id>https://987763485.github.io/2018/02/22/国内知名前端团队/</id>
    <published>2018-02-22T11:24:44.000Z</published>
    <updated>2019-02-19T11:43:25.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><p> <a href="http://imweb.io/" target="_blank" rel="noopener">腾讯IMWEB</a><br> <a href="http://www.alloyteam.com/" target="_blank" rel="noopener">腾讯AlloyTeam</a><br> <a href="https://cdc.tencent.com/" target="_blank" rel="noopener">腾讯CDC</a></p><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><p> <a href="http://taobaofed.org/" target="_blank" rel="noopener">淘宝前端团队FED</a></p><h2 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h2><p> <a href="https://aotu.io/" target="_blank" rel="noopener">凹凸实验室</a><br> <a href="https://jdc.jd.com/" target="_blank" rel="noopener">京东设计中心JDC</a></p><h2 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h2><p> <a href="http://fex.baidu.com/" target="_blank" rel="noopener">百度Fex</a><br> <a href="https://efe.baidu.com/" target="_blank" rel="noopener">百度efe</a><br> <a href="http://eux.baidu.com/" target="_blank" rel="noopener">百度eux</a></p><h2 id="360奇舞团"><a href="#360奇舞团" class="headerlink" title="360奇舞团"></a>360奇舞团</h2><p> <a href="https://75team.com/" target="_blank" rel="noopener">奇虎360</a></p><h2 id="去哪儿"><a href="#去哪儿" class="headerlink" title="去哪儿"></a>去哪儿</h2><p> <a href="https://ymfe.org/" target="_blank" rel="noopener">去哪大前端YMFE</a></p><h2 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h2><p> <a href="http://ued.ctrip.com/" target="_blank" rel="noopener">携程UED</a></p><h2 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h2><p> <a href="https://tech.meituan.com/" target="_blank" rel="noopener">美团前端</a></p><h2 id="有赞"><a href="#有赞" class="headerlink" title="有赞"></a>有赞</h2><p> <a href="https://tech.youzan.com/" target="_blank" rel="noopener">有赞技术团队</a></p><h2 id="人人网"><a href="#人人网" class="headerlink" title="人人网"></a>人人网</h2><p> <a href="https://fed.renren.com/" target="_blank" rel="noopener">人人Fed</a></p><h2 id="滴滴出行"><a href="#滴滴出行" class="headerlink" title="滴滴出行"></a>滴滴出行</h2><p> <a href="https://didi.github.io/" target="_blank" rel="noopener">滴滴开源平台</a></p><h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><p> <a href="https://techblog.toutiao.com/" target="_blank" rel="noopener">字节跳动技术博客</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p> <a href="https://www.docschina.org/" target="_blank" rel="noopener">印记中文</a><br> <a href="http://dopro.io/" target="_blank" rel="noopener">deepOcean</a><br> <a href="https://uiiiuiii.com/" target="_blank" rel="noopener">优优设计网</a><br> <a href="https://github.com/niezhiyang/open_source_team#1%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4" target="_blank" rel="noopener">国内顶尖团队的开源地址</a><br> <a href="https://github.com/webproblem/learning-article" target="_blank" rel="noopener">前端资源整合</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;腾讯&quot;&gt;&lt;a href=&quot;#腾讯&quot; class=&quot;headerlink&quot; title=&quot;腾讯&quot;&gt;&lt;/a&gt;腾讯&lt;/h2&gt;&lt;p&gt; &lt;a href=&quot;http://imweb.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;腾讯IMWEB&lt;/a&gt;
      
    
    </summary>
    
      <category term="计算机编程" scheme="https://987763485.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="web前端" scheme="https://987763485.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="https://987763485.github.io/2018/02/19/%E5%BC%80%E7%AF%87/"/>
    <id>https://987763485.github.io/2018/02/19/开篇/</id>
    <published>2018-02-19T11:04:57.000Z</published>
    <updated>2019-02-19T11:12:35.252Z</updated>
    
    <content type="html"><![CDATA[<p>今天开通了GitHub博客，希望在以后的日子里能记录在编程中遇到的问题，以便学习！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天开通了GitHub博客，希望在以后的日子里能记录在编程中遇到的问题，以便学习！&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
